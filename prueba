#include <WiFi.h>
#include <WebServer.h>

const char* ssid = "Coda";
const char* password = "Mac25060*";

const int ledPin1 = 21;
const int ledPin2 = 22;
const int ledPin3 = 23;

const int motorPin1 = 4;
const int motorPin2 = 5;
const int motorPin3 = 18;
const int motorPin4 = 19;

bool cortinasSubidas = false;
bool motorCortinasEnMovimiento = false;
unsigned long tiempoInicioMovimientoCortinas = 0;

bool aperturaAbierta = false;
bool motorAperturaEnMovimiento = false;
unsigned long tiempoInicioMovimientoApertura = 0;

const unsigned long duracionMovimiento = 3000;

WebServer server(80);

void handle_OnConnect() {
  String html = R"rawliteral(
    <!DOCTYPE html>
    <html lang="es">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Control de Cortinas, Apertura y Luces</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          background-color: #f4f4f4;
          color: #333;
          text-align: center;
          padding: 20px;
        }
        h1 {
          color: #2c3e50;
        }
        .status {
          font-size: 1.5em;
          margin-top: 20px;
          padding: 10px;
          background-color: #ecf0f1;
          border-radius: 10px;
          display: inline-block;
        }
        .button-container {
          margin-top: 30px;
        }
        button {
          background-color: #3498db;
          color: white;
          font-size: 1.2em;
          padding: 15px 30px;
          border: none;
          border-radius: 10px;
          cursor: pointer;
          margin: 10px;
        }
        button:hover {
          background-color: #2980b9;
        }
      </style>
    </head>
    <body>
      <h1>Control de Cortinas, Apertura y Luces</h1>
      <div class="status">
        Cortinas: <strong>)rawliteral";
  html += (cortinasSubidas) ? "Subidas" : "Bajadas";
  html += R"rawliteral(</strong>
      </div>
      <div class="status">
        Apertura: <strong>)rawliteral";
  html += (aperturaAbierta) ? "Abierta" : "Cerrada";
  html += R"rawliteral(</strong>
      </div>

      <h2>Control de Cortinas y Apertura</h2>
      <div class="button-container">
        <button onclick="location.href='/subir'">Subir Cortinas</button>
        <button onclick="location.href='/bajar'">Bajar Cortinas</button>
        <button onclick="location.href='/abrir'">Abrir Apertura</button>
        <button onclick="location.href='/cerrar'">Cerrar Apertura</button>
      </div>

      <h2>Control de Luces</h2>
      <div class="button-container">
        <button onclick="location.href='/encenderHabitacion1'">Encender Habitaci贸n 1</button>
        <button onclick="location.href='/apagarHabitacion1'">Apagar Habitaci贸n 1</button>
        <button onclick="location.href='/encenderHabitacion2'">Encender Habitaci贸n 2</button>
        <button onclick="location.href='/apagarHabitacion2'">Apagar Habitaci贸n 2</button>
        <button onclick="location.href='/encenderSala'">Encender Sala</button>
        <button onclick="location.href='/apagarSala'">Apagar Sala</button>
      </div>
    </body>
    </html>
  )rawliteral";

  server.send(200, "text/html", html);
}

void encenderHabitacion1() {
  digitalWrite(ledPin1, HIGH);
  server.sendHeader("Location", "/", true);
  server.send(303);
}

void apagarHabitacion1() {
  digitalWrite(ledPin1, LOW);
  server.sendHeader("Location", "/", true);
  server.send(303);
}

void encenderHabitacion2() {
  digitalWrite(ledPin2, HIGH);
  server.sendHeader("Location", "/", true);
  server.send(303);
}

void apagarHabitacion2() {
  digitalWrite(ledPin2, LOW);
  server.sendHeader("Location", "/", true);
  server.send(303);
}

void encenderSala() {
  digitalWrite(ledPin3, HIGH);
  server.sendHeader("Location", "/", true);
  server.send(303);
}

void apagarSala() {
  digitalWrite(ledPin3, LOW);
  server.sendHeader("Location", "/", true);
  server.send(303);
}

void iniciarMovimientoCortinas(bool subir) {
  if (!motorCortinasEnMovimiento) {
    motorCortinasEnMovimiento = true;
    tiempoInicioMovimientoCortinas = millis();
    digitalWrite(motorPin1, subir ? HIGH : LOW);
    digitalWrite(motorPin2, subir ? LOW : HIGH);
  }
}

void iniciarMovimientoApertura(bool abrir) {
  if (!motorAperturaEnMovimiento) {
    motorAperturaEnMovimiento = true;
    tiempoInicioMovimientoApertura = millis();
    digitalWrite(motorPin3, abrir ? HIGH : LOW);
    digitalWrite(motorPin4, abrir ? LOW : HIGH);
  }
}

void handle_subirCortinas() {
  if (!cortinasSubidas && !motorCortinasEnMovimiento) {
    iniciarMovimientoCortinas(true);
    cortinasSubidas = true;
    server.sendHeader("Location", "/", true);
    server.send(303);
  }
}

void handle_bajarCortinas() {
  if (cortinasSubidas && !motorCortinasEnMovimiento) {
    iniciarMovimientoCortinas(false);
    cortinasSubidas = false;
    server.sendHeader("Location", "/", true);
    server.send(303);
  }
}

void handle_abrirApertura() {
  if (!aperturaAbierta && !motorAperturaEnMovimiento) {
    iniciarMovimientoApertura(true);
    aperturaAbierta = true;
    server.sendHeader("Location", "/", true);
    server.send(303);
  }
}

void handle_cerrarApertura() {
  if (aperturaAbierta && !motorAperturaEnMovimiento) {
    iniciarMovimientoApertura(false);
    aperturaAbierta = false;
    server.sendHeader("Location", "/", true);
    server.send(303);
  }
}

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
  }
  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);
  pinMode(ledPin3, OUTPUT);
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(motorPin3, OUTPUT);
  pinMode(motorPin4, OUTPUT);
  server.on("/", HTTP_GET, handle_OnConnect);
  server.on("/subir", HTTP_GET, handle_subirCortinas);
  server.on("/bajar", HTTP_GET, handle_bajarCortinas);
  server.on("/abrir", HTTP_GET, handle_abrirApertura);
  server.on("/cerrar", HTTP_GET, handle_cerrarApertura);
  server.on("/encenderHabitacion1", HTTP_GET, encenderHabitacion1);
  server.on("/apagarHabitacion1", HTTP_GET, apagarHabitacion1);
  server.on("/encenderHabitacion2", HTTP_GET, encenderHabitacion2);
  server.on("/apagarHabitacion2", HTTP_GET, apagarHabitacion2);
  server.on("/encenderSala", HTTP_GET, encenderSala);
  server.on("/apagarSala", HTTP_GET, apagarSala);
  server.begin();
}

void loop() {
  server.handleClient();
}

